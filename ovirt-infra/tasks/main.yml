---
- name: Login to oVirt
  ovirt_auth:
    url: "{{ engine_url }}"
    username: "{{ engine_user }}"
    password: "{{ engine_password }}"
    ca_file: "{{ engine_cafile | default(omit) }}"
    insecure: "{{ engine_insecure | default(true) }}"
  tags:
    - always

- name: Add datacenter
  ovirt_datacenters:  
    auth: "{{ ovirt_auth }}"
    state: present
    name: "{{ data_center_name }}"
    description: "{{ dc_description | default(omit) }}"
    local: "{{ dc_local | default(false) }}"
    compatibility_version: "{{ compatibility_version }}"
  tags:
    - datacenters

- name: Add clusters
  ovirt_clusters:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    data_center: "{{ data_center_name }}"
    cpu_type: "{{ item.cpu_type | default('Intel Conroe Family') }}"
    compatibility_version: "{{ compatibility_version }}"
    ballooning: "{{ item.ballooning | default(omit) }}"
    description: "{{ item.description | default(omit) }}"
    ksm: "{{ item.ksm | default(omit) }}"
    ksm_numa: "{{ item.ksm_numa | default(omit) }}"
    host_reason: "{{ item.host_reason | default(omit) }}"
    vm_reason: "{{ item.vm_reason | default(omit) }}"
    memory_policy: "{{ item.memory_policy | default('disabled') }}"
    migration_policy: "{{ item.migration_policy | default(omit) }}"
    scheduling_policy: "{{ item.scheduling_policy | default(omit) }}"
    ha_reservation: "{{ item.ha_reservation | default(omit) }}"
    fence_enabled: "{{ item.fence_enabled | default(omit) }}"
    fence_skip_if_connectivity_broken: "{{ item.fence_skip_if_connectivity_broken | default(omit) }}"
    fence_skip_if_sd_active: "{{ item.fence_skip_if_sd_active | default(omit) }}"
  with_items:
    - "{{ clusters | default([]) }}"
  tags:
    - clusters

#########################################
# Logical networks
#########################################
- name: Add networks
  ovirt_networks:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    data_center: "{{ data_center_name }}"
    vlan_tag: "{{ item.vlan_tag | default(omit) }}"
    vm_network: "{{ item.vm_network | default(omit) }}"
    mtu: "{{ item.mtu | default(omit) }}"
    description: "{{ item.description | default(omit) }}"
    clusters: "{{ item.clusters | default(omit) }}"
  with_items:
      - "{{ logical_networks | default([]) }}"
  tags:
    - logical_networks
    - networks

#########################################
# Hosts
#########################################
- name: Get hosts
  ovirt_hosts_facts:
    auth: "{{ ovirt_auth }}"
    pattern: "name=*"
  tags:
    - hosts
    - reinstall

- name: Reinstall hosts
  ovirt_hosts:
    auth: "{{ ovirt_auth }}"
    state: reinstalled
    name: "{{ item.name }}"
  with_items:
    - "{{ ovirt_hosts | default([]) }}"
  when: item.status == 'install_failed'
  tags:
    - hosts
    - reinstall

- name: Add hosts
  ovirt_hosts:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    address: "{{ item.address }}"
    password: "{{ item.password }}"
    cluster: "{{ item.cluster }}"
    override_iptables: true
    timeout: "{{ item.timeout | default(600) }}"
    poll_interval: "{{ item.poll_interval | default(15) }}"
  with_items:
    - "{{ hosts | default([]) }}"
  tags:
    - hosts

- name: Setup host networks
  ovirt_host_networks:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit) }}"
    check: "{{ item.check | default(omit) }}"
    save: "{{ item.save | default(omit) }}"
    bond: "{{ item.bond | default(omit) }}"
    networks: "{{ item.networks | default(omit) }}"
    labels: "{{ item.labels | default(omit) }}"
    interface: "{{ item.interface | default(omit) }}"
  with_items:
    - "{{ host_networks }}"
  tags:
    - host_networks
    - networks

#################################################
# Storages
#################################################
# In dict the default(omit) don't work:
# https://github.com/ansible/ansible/issues/14130
- name: Add storages
  ovirt_storage_domains:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.value.state | default(omit) }}"
    name: "{{ item.key }}"
    domain_function: "{{ item.value.domain_function | default(omit) }}"
    host: "{{ hosts[0].name }}"
    data_center: "{{ data_center_name }}"
    nfs: "{{ item.value.nfs | default(omit) }}"
    iscsi: "{{ item.value.iscsi | default(omit) }}"
    posixfs: "{{ item.value.posixfs | default(omit) }}"
    glusterfs: "{{ item.value.glusterfs | default(omit) }}"
    fcp: "{{ item.value.fcp | default(omit) }}"
  with_dict: "{{ storages | default({}) }}"
  tags:
    - storages

- name: Fetch storages
  ovirt_storage_domains_facts:
    auth: "{{ ovirt_auth }}"
    pattern: "type=nfs or type=iscsi or type=posixfs or type=glusterfs or type=fcp"
    #pattern: "type=nfs or type=posixfs or type=glusterfs"
    #pattern: "type=iscsi or type=fcp"
    fetch_nested: true
  tags:
    - storages

- name: Validate connections of storages
  ovirt_storage_connections:
    auth: "{{ ovirt_auth }}"
    id: "{{ item.1.id[0] }}"
    storage: "{{ item.0.name }}"
    address: "{{ storages[item.0.name][item.0.storage.type].address | default(omit) }}"
    path: "{{ storages[item.0.name][item.0.storage.type].path | default(omit) }}"
    nfs_timeout: "{{ storages[item.0.name][item.0.storage.type].timeout | default(omit) }}"
    nfs_version: "{{ storages[item.0.name][item.0.storage.type].version | default(omit) }}"
    nfs_retrans: "{{ storages[item.0.name][item.0.storage.type].retrans | default(omit) }}"
    mount_options: "{{ storages[item.0.name][item.0.storage.type].mount_options | default(omit) }}"
    username: "{{ storages[item.0.name][item.0.storage.type].username | default(omit) }}"
    password: "{{ storages[item.0.name][item.0.storage.type].password | default(omit) }}"
    port: "{{ storages[item.0.name][item.0.storage.type].port | default(omit) }}"
    target: "{{ storages[item.0.name][item.0.storage.type].target | default(omit) }}"
    force: true
  with_subelements:
    - "{{ ovirt_storage_domains | default([]) }}"
    - storage_connections
  tags:
    - storages

################################
## User & groups internal
################################
- name: Manage internal users
  command: "{{ aaa_jdbc_prefix }}/ovirt-aaa-jdbc-tool user {{ (item.state is undefined or item.state == 'present') | ternary('add','delete') }} {{ item.name }}"
  with_items:
    - "{{ users | default([]) }}"
  register: out_users
  changed_when: "out_users.rc != 5 and out_users.rc != 4"
  # 5 == user already exists
  # 4 == no user to be removed
  # 0 == all OK
  failed_when: "out_users.rc != 5 and out_users.rc != 0 and out_users.rc != 4"
  when: internal
  tags:
    - users

# FIXME: when user try to change the password which was already set in history
# but is not current password we continue with changed=false:
- name: Manage internal users passwords
  no_log: false
  command: "{{ aaa_jdbc_prefix }}/ovirt-aaa-jdbc-tool user password-reset {{ item.name }} --password=\"pass:{{ item.password }}\" --password-valid-to=\"{{ item.valid_to }}\""
  with_items:
    - "{{ users | default([]) }}"
  register: out_users
  changed_when: "out_users.rc != 1"
  failed_when: "out_users.rc != 1 and out_users.rc != 0"
  when: internal
  tags:
    - users

- name: Manage internal groups
  command: "{{ aaa_jdbc_prefix }}/ovirt-aaa-jdbc-tool group {{ (item.state is undefined or item.state == 'present') | ternary('add','delete') }} {{ item.name }}"
  with_items:
    - "{{ user_groups | default([]) }}"
  register: out_groups
  changed_when: "out_groups.rc != 5 and out_groups.rc != 4"
  failed_when: "out_groups.rc != 5 and out_groups.rc != 0 and out_groups.rc != 4"
  when: internal
  tags:
    - user_groups

# FIXME: Support only add, if the user is removed from list, it's not removed from the group:
- name: Manage groups members
  command: "{{ aaa_jdbc_prefix }}/ovirt-aaa-jdbc-tool group-manage {{ (item.state is undefined or item.state == 'present') | ternary('useradd','userdel') }} {{ item.0.name }} --user {{ item.1 }}"
  with_subelements:
    - "{{ user_groups | default([]) }}"
    - users
  register: out_group_member
  changed_when: "out_group_member.rc != 3"
  failed_when: "out_group_member.rc != 3 and out_group_member.rc != 0"
  when: internal
  tags:
    - user_groups

################################
## User & groups system magement
################################
- name: Manage users
  ovirt_users:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    authz_name: "{{ item.authz_name | default(omit) }}"
  with_items:
      - "{{ users | default([]) }}"
  tags:
    - users
    - permissions

- name: Manage groups
  ovirt_groups:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    authz_name: "{{ item.authz_name | default(omit) }}"
  with_items:
      - "{{ user_groups | default([]) }}"
  tags:
    - user_groups
    - permissions

- name: Manage permissions
  ovirt_permissions:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    group_name: "{{ item.group_name | default(omit) }}"
    user_name: "{{ item.user_name | default(omit) }}"
    authz_name: "{{ item.authz_name }}"
    object_type: "{{ item.object_type }}"
    object_name: "{{ item.object_name }}"
    role: "{{ item.role }}"
  with_items:
      - "{{ permissions | default([]) }}"
  tags:
    - permissions

- name: Logout from oVirt
  ovirt_auth:
    state: absent
    ovirt_auth: "{{ ovirt_auth }}"
  tags:
    - always
